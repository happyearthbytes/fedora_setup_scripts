#!/usr/bin/env bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd ${SCRIPT_DIR}/..

PROJECT=
TMP_CHARTS=
YAML_BASE=
CHART_NAME=
NAMESPACE=
CHART_URL=

create_main_directory() {
    mkdir -p ${PROJECT}
    mkdir -p ${YAML_BASE}
    mkdir -p ${TMP_CHARTS}
    if [ ! -f ${PROJECT}/generate.sh ]; then

        cat <<EOF > ${PROJECT}/generate.sh
#!/usr/bin/env bash
# NOTE: This file is automatically generated!
# TODO: currently this needs to be run from the project directory
SCRIPT_DIR=\$( cd -- "\$( dirname -- "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd \${SCRIPT_DIR}/..
CHART_SELECTOR=${CHART_SELECTOR}
CHART_NAME=${CHART_NAME}
CHART_URL=${CHART_URL}
./scripts/get_helm.sh \\
  \${CHART_SELECTOR} \\
  \${CHART_NAME} \\
  \${CHART_URL}
EOF

        chmod +x ${PROJECT}/generate.sh
    fi
}
add_repo() {
    local found=$(helm repo list | grep ${CHART_URL})
    if [ "$found" == "" ]; then
        helm repo add ${CHART_NAME} ${CHART_URL}
    fi
}
download_chart() {
    if [ ! -d ${TMP_CHARTS}/${CHART_NAME} ]; then
        helm fetch --untar \
        --untardir ${TMP_CHARTS} \
        ${CHART_SELECTOR}/${CHART_NAME}
    fi
}
create_template() {
    if [ ! -f ${PROJECT}/values.yaml ]; then
        cp ${TMP_CHARTS}/${CHART_NAME}/values.yaml ${PROJECT}/
        echo "NOTE: Customize ${CHART_NAME}/values.yaml"
        echo "NOTE: To continue: ./${CHART_NAME}/generate.sh"
        exit 1
    fi
    helm template \
      --generate-name \
      --output-dir ${YAML_BASE} \
      --values ${PROJECT}/values.yaml \
      --wait \
      ${CHART_SELECTOR}/${CHART_NAME}
    #   --namespace ${NAMESPACE} \

    mv ${YAML_BASE_TMP_PROJ}/templates/* ${YAML_BASE} && rm -rf ${YAML_BASE_TMP_PROJ}
    echo "Removing: ${TMP_CHARTS}"
    rm -rf ${TMP_CHARTS}
}
kustomization_overlay()
{
    if [ ! -d ${PROJECT}/overlay ]; then
        mkdir -p ${PROJECT}/overlay
        # next we want to create two overlays as a starting point
        mkdir -p ${PROJECT}/overlay/common
        mkdir -p ${PROJECT}/overlay/example
        # then we want to copy the kustomize file to each overlay
        # in order to do that we start by creating the kustomize file
        
        cat <<EOF > ${PROJECT}/overlay/common/kustomization.yaml
resources:
- ../../base
patches:
- target:
  kind: Namespace
  name: default
  patch: |-
    - op: replace
      path: /metadata/name
      value: new-name 
EOF

        cp ${PROJECT}/overlay/common/kustomization.yaml ${PROJECT}/overlay/example/kustomization.yaml
        echo "IMPORTANT: Modify ${PROJECT}/overlay/*/kustomization.yaml"
    fi
}
kustomization_project()
{
    if [ ! -f kustomization.yaml ]; then
        
        cat <<EOF > ${PROJECT}/kustomization.yaml
resources:
- overlay/common
- overlay/example
EOF

    fi
}
kustomization_base()
{
    local location=${YAML_BASE}/kustomization.yaml
    # we want to dynamically do this.
    if [ ! -f ${location} ]; then

        cat <<EOF > ${location}
############################################################################### 
#
#         !!!!!!!!!!! WARNING !!!!!!!!!!!
#
#         This file is automatically generated
#         and must be manually modified
#         before applying the kustomization.
#
#         Remove this message after it has been modified
#
############################################################################### 

namespace: <TODO>
commonLabels: <TODO>
roles: <TODO>
resources:
— <TODO>.yaml
— <TODO>.yaml
EOF

        echo "IMPORTANT: Modify ${location}"
    fi
}
start_sh() {
    local location=${PROJECT}/start.sh
    if [ ! -f ${location} ]; then

        cat <<EOF > ${location}
#!/usr/bin/env bash
# NOTE: This file is automatically generated!
# TODO: Currently needs to be run from the k3s dir
SCRIPT_DIR=\$( cd -- "\$( dirname -- "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd \${SCRIPT_DIR}
kubectl apply -k ${CHART_NAME}
EOF

        chmod +x ${location}
        echo "NOTE: To start: ./${PROJECT}/start.sh"
    fi
}
stop_sh() {
    local location=${PROJECT}/stop.sh
    if [ ! -f ${location} ]; then

        cat <<EOF > ${location}
#!/usr/bin/env bash
# NOTE: This file is automatically generated!
# TODO: Currently needs to be run from the k3s dir
SCRIPT_DIR=\$( cd -- "\$( dirname -- "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd \${SCRIPT_DIR}
kubectl delete -k ${CHART_NAME}
EOF

        chmod +x ${location}
        echo "NOTE: To stop: ./${PROJECT}/stop.sh"
    fi
}
create_kustomization() {
    kustomization_project
    kustomization_base
    kustomization_overlay
    start_sh
    stop_sh
}
main() {
    # Assign Variables
    CHART_SELECTOR=$1
    CHART_NAME=$2
    CHART_URL=$3
    # NAMESPACE=$5
    PROJECT=${CHART_NAME}
    TMP_CHARTS=${PROJECT}/charts
    YAML_BASE=${PROJECT}/base
    YAML_BASE_TMP_PROJ=${YAML_BASE}/${CHART_NAME}
    
    # Run the functions
    create_main_directory
    add_repo
    download_chart
    create_template
    create_kustomization
}

main "$@"